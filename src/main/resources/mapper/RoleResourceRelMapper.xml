<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jd.coo.permission.dao.RoleResourceRelDao">
	<resultMap id="BaseResultMap" type="RoleResourceRel">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="role_id" property="roleId" jdbcType="BIGINT" />
		<result column="parent_id" property="parentId" jdbcType="BIGINT" />
		<result column="parent_code" property="parentCode" jdbcType="VARCHAR" />
        <result column="parent_name" property="parentName" jdbcType="VARCHAR" />
        <result column="code" property="code" jdbcType="VARCHAR" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="type" property="type" jdbcType="TINYINT" />
		<result column="url" property="url" jdbcType="VARCHAR" />
		<result column="seq" property="seq" jdbcType="INTEGER" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
		<result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
		<result column="create_user" property="createUser" jdbcType="VARCHAR" />
		<result column="update_user" property="updateUser" jdbcType="VARCHAR" />
		<result column="yn" property="yn" jdbcType="TINYINT" />
	</resultMap>
	
	<sql id="Base_Column_List">
		<trim prefix="" suffix="" suffixOverrides=",">
		id,
		role_id,
		resource_id,
		create_time,
		update_time,
		create_user,
		update_user,
		yn,
		</trim>
	</sql>
	
	<!-- 根据Id查询 -->
	<select id="getRoleResourceRel" resultMap="BaseResultMap" parameterType="Long">
		select
		<include refid="Base_Column_List" />
		from role_resource_rel
		where id = #{id,jdbcType=BIGINT}
	</select>
	
	<!-- 根据条件查询列表 -->
	<select id="findRoleResourceRelList" resultMap="BaseResultMap" parameterType="com.jd.coo.permission.condition.RoleResourceRelCondition">
			select
			<trim prefix="" suffix="" suffixOverrides=",">
			r.id,
			r.parent_id,
			r.name,
	        r.code,
			r.type,
			r.url,
			r.seq,
			r.create_time,
			r.update_time,
			r.create_user,
			r.update_user,
			r.yn,
			rr.role_id
			</trim>
		   from bs_resource r
		  left join  role_resource_rel  rr on r.id = resource_id  and rr.role_id= #{po.roleId,jdbcType=BIGINT}
			<where>   
			 r.yn=1
			</where>
	</select>
	
	<!-- 插入实体 -->
	<insert id="insertRoleResourceRel" parameterType="RoleResourceRel" useGeneratedKeys="true" keyProperty="id">
		insert into role_resource_rel 
		<trim prefix="(" suffix=")" suffixOverrides=",">
		role_id,
		resource_id,
		create_time,
		update_time,
		create_user,
		update_user,
		yn,
		</trim>
		values 
		<trim prefix="(" suffix=")" suffixOverrides=",">
		#{roleId,jdbcType=BIGINT},
		#{resourceId,jdbcType=BIGINT},
		#{createTime,jdbcType=TIMESTAMP},
		#{updateTime,jdbcType=TIMESTAMP},
		#{createUser,jdbcType=VARCHAR},
		#{updateUser,jdbcType=VARCHAR},
		#{yn,jdbcType=TINYINT},
		</trim>
	</insert>
	
	
	
	<!-- 删除实体 -->
	<update id="deleteRoleResourceRel" parameterType="RoleResourceRel" >
		delete from  role_resource_rel
		where role_id = #{roleId,jdbcType=BIGINT}  and resource_id =   #{resourceId,jdbcType=BIGINT}
	</update>

      <!-- 删除实体 -->
    <update id="deleteRoleResourceRelByRoleId" parameterType="long" >
		delete from  role_resource_rel
		where role_id =   #{roleId,jdbcType=BIGINT}
	</update>
	
	
    <!-- 删除实体 -->
    <update id="deleteRoleResourceRelByResourceId" parameterType="long" >
		delete from  role_resource_rel
		where resource_id =   #{resourceId,jdbcType=BIGINT}
	</update>

	 <!-- 删除用户 -->
    <update id="deleteRoleResourceRelBatch" parameterType="long[]">
        update role_resource_rel
        <set>
            <trim prefix="" suffix="" suffixOverrides=",">
                yn = 0
            </trim>
        </set>
        where  1=1 
             and id in
             <foreach item="item" collection="ids" index="index"  open="(" separator="," close=")">
					#{item,jdbcType=BIGINT}
            </foreach>
    </update>
</mapper>